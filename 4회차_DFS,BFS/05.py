# 피로도

# 문제 설명
# XX게임에는 피로도 시스템(0 이상의 정수로 표현합니다)이 있으며, 일정 피로도를 사용해서 던전을 탐험할 수 있습니다. 
# 이때, 각 던전마다 탐험을 시작하기 위해 필요한 "최소 필요 피로도"와 던전 탐험을 마쳤을 때 소모되는 "소모 피로도"가 있습니다. 
# "최소 필요 피로도"는 해당 던전을 탐험하기 위해 가지고 있어야 하는 최소한의 피로도를 나타내며, "소모 피로도"는 던전을 탐험한 후 소모되는 피로도를 나타냅니다. 
# 예를 들어 "최소 필요 피로도"가 80, "소모 피로도"가 20인 던전을 탐험하기 위해서는 유저의 현재 남은 피로도는 80 이상 이어야 하며, 던전을 탐험한 후에는 피로도 20이 소모됩니다.

# 이 게임에는 하루에 한 번씩 탐험할 수 있는 던전이 여러개 있는데, 한 유저가 오늘 이 던전들을 최대한 많이 탐험하려 합니다. 
# 유저의 현재 피로도 k와 각 던전별 "최소 필요 피로도", "소모 피로도"가 담긴 2차원 배열 dungeons 가 매개변수로 주어질 때, 유저가 탐험할수 있는 최대 던전 수를 return 하도록 solution 함수를 완성해주세요.

# 제한사항
# 1. k는 1 이상 5,000 이하인 자연수입니다.
# 2. dungeons의 세로(행) 길이(즉, 던전의 개수)는 1 이상 8 이하입니다.
# 3. dungeons의 가로(열) 길이는 2 입니다.
# 4. dungeons의 각 행은 각 던전의 ["최소 필요 피로도", "소모 피로도"] 입니다.
# 5. "최소 필요 피로도"는 항상 "소모 피로도"보다 크거나 같습니다.
# 6. "최소 필요 피로도"와 "소모 피로도"는 1 이상 1,000 이하인 자연수입니다.
# 7. 서로 다른 던전의 ["최소 필요 피로도", "소모 피로도"]가 서로 같을 수 있습니다.


from itertools import permutations

def solution(k, dungeons):
    answer = []
    p_list = list(permutations(dungeons))
    print(p_list) 
    # [([80, 20], [50, 40], [30, 10]), ([80, 20], [30, 10], [50, 40]), ([50, 40], [80, 20], [30, 10]), ([50, 40], [30, 10], [80, 20]), ([30, 10], [80, 20], [50, 40]), ([30, 10], [50, 40], [80, 20])]
    
    for p in p_list:
        print(p)
        '''
        ([80, 20], [50, 40], [30, 10])
        ([80, 20], [30, 10], [50, 40])
        ([50, 40], [80, 20], [30, 10])
        ([50, 40], [30, 10], [80, 20])
        ([30, 10], [80, 20], [50, 40])
        ([30, 10], [50, 40], [80, 20])
        '''
        now = k
        count = 0
        for a, b in p:
            print(a, b)
            if now >= a:
                now -= b
                count += 1
                answer.append(count)

    return max(answer)

print(solution(80, [[80, 20], [50, 40], [30, 10]]))   # 3
    

# 정리한 코드
def solution(k, dungeons):
    answer = []                              # 유저가 탐험할 수 있는 던전의 수가 담긴 배열
    for p in list(permutations(dungeons)):   # 순열을 이용해서 하루에 탐험할 수 있는 던전의 경우의 수를 모두 구한 후 그 안에서 반복
        now = k                              # now : 유저의 현재 피로도
        count = 0                            # 유저가 탐험할 수 있는 던전의 수 
        for a, b in p:                       # 경우의 수 안에서 피로도 계산 (a = 최소 필요 피로도, b = 소모 피로도)
            if now >= a:                     # 현재 피로도가 최소 필요 피로도보다 크거나 같으면 탐험 가능
                now -= b                     # 현재 피로도에서 소모 피로도 뺄셈
                count += 1                   # 탐험한 던전 수 +1
                answer.append(count)
        
    return max(answer)


